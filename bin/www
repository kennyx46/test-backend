#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('test-task-backend:server');
var http = require('http');
var io = require('socket.io');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3001');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
io = io.listen(server);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

// sockets events
var User = require('../models/User')
var Vote = require('../models/Vote')
var people = {}
io.sockets.on('connection', function(client) {
  client.on('user:login', function(newUser) {
    people[client.id] = newUser.userName
    client.emit('user:location:query')
    console.log("AFTER EMIT")
    client.on('user:location', function(location) {
      console.log("user:location")
      console.log(location)
      console.log("NULL")
      // location = {userName: 'bla', location: 'bla'}
      Vote.findOne({'user.name': location.userName})
        .then(function (user) {
          console.log(user)
          console.log("in FindOne")
          client.emit('user:location:result', {
            user: location.userName,
            location: user.location
          })
          // if (io.sockets.connected[socketid]) {
          //     io.sockets.connected[socketid].emit('message', 'for your eyes only');
          // }
        })
    })
  })
  client.on('image:like', function (data) {
    Vote.findOne({userName: data.userName})
      .then(function (vote) {
        //
      })
  })
  client.on('image:dislike', function (data) {
    Vote.findOne({userName: data.userName})
      .then(function (vote) {
        //
      })
  })
})

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
